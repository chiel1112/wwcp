//This is a documentation class for copy pasting into an electric train class.
package wwcp.locomotives.electrics

import cpw.mods.fml.relauncher.Side;
import cpw.mods.fml.relauncher.SideOnly;
import ebf.tim.TrainsInMotion;
import ebf.tim.api.SkinRegistry;
import ebf.tim.entities.EntityTrainCore;
import ebf.tim.items.ItemTransport;
import ebf.tim.models.Bogie;
import ebf.tim.registry.URIRegistry;
import fexcraft.tmt.slim.ModelBase;
import net.minecraft.item.Item;
import net.minecraft.item.ItemStack;
import net.minecraft.util.ResourceLocation;
import net.minecraft.world.World;
import wwcp.worldwidecontentpack;
import java.util.UUID;
import net.minecraft.init.Items;


// XXXX -> Entity Name
// YYYY -> Data for SuperStat
// ZZZZ -> Country for tab
// QQQQ -> Bogies

    public class EntityRE484 extends EntityTrainCore {

        public static final Item thisItem = new ItemTransport(new wwcp.entities.locomotives.EntityRE484(null), worldwidecontentpack.MODID,worldwidecontentpack.ZZZZ);

        /**
         * these basic constructors only need to have their names changed to that of this class, that is assuming your editor doesn't automatically do that.
         * Be sure the one that takes more than a world is always first, unless you wanna compensate for that in the item declaration.
         * @see EntityTrainCore
         */
        public EntityRE484(UUID owner, World world, double xPos, double yPos, double zPos) {
            super(owner, world, xPos, yPos, zPos);
        }
        public EntityRE484(World world){
            super(world);
        }

    @Override
    public String transportName() { return SuperStat.YYYY().name; }

    @Override
    public String transportcountry() { return SuperStat.YYYY().country; }

    @Override
    public String transportYear() { return SuperStat.YYYY().year; }

    @Override
    public String transportFuelType() {
        return SuperStat.YYYY().fuel;
    }
    @Override
    public boolean isFictional() {
        return SuperStat.YYYY().fictional;
    }
    @Override
    public float transportTractiveEffort() {
        return SuperStat.YYYY().tractive_effort;
    }
    @Override
    public float transportMetricHorsePower() {
        return SuperStat.YYYY().metric_horsepower;
    }
    @Override
    public float weightKg() {
        return  SuperStat.YYYY().weightinKGs;
    }

        public boolean isReinforced() {
            return SuperStat.YYYY().reinforced;
        }

    @Override
    public String[] additionalItemText() {
        {return new String[]{RailUtility.translate(SuperStat.YYYY().additionalTextTitle) + SuperStat.YYYY().additionalText,
                RailUtility.translate(SuperStat.YYYY().additionalTextTitle2) + SuperStat.YYYY().additionalText2};}
    }

    @Override
    public float transportTopSpeed(){return accelerator<0?SuperStat.YYYY().backTopSpeed:SuperStat.YYYY().topSpeed;}

        @Override
        public void registerSkins(){
            SkinRegistry.addSkin(this.getClass(),worldwidecontentpack.MODID, "textures/locomotive/Electric/F140MS2/T6.png", "textures/bogies/Flexxpower.png",
                    "HLE28 NMBS Cargo", "Used by the NMBS/SNCB in belgium for freight trains");
        }
        @Override
        public float getMaxFuel(){return 20;}

@Override
        public TrainsInMotion.transportTypes getType() {return TrainsInMotion.transportTypes.ELECTRIC;
        }



        @Override
        public float[][] getRiderOffsets(){return new float[][]{{-3.82f,1.4f, -0.25f}};}

        @Override
        public float[] getHitboxSize() {
            return new float[]{9.5f,2.5f,1.5f};
        }

        public ItemStack[] getRecipie() {
            return new ItemStack[]{
                    null, null, null,
                    null, null, null,
                    null, null, null
            };
        }

        /**
         * <h2>Hitbox offsets</h2>
         * @return defines the positions for the hitboxes in blocks. 0 being the center, negative values being towards the front. the first and last values define the positions of the couplers
         */

        @Override
        public float[][] bogieModelOffsets(){return new float[][]{{2.5f,0.05f,0},{-2.5f,0.05f,0}};
        }
        @Override
        public ModelBase[] bogieModels() {return new ModelBase[]{new ZZZZ()}; }

        @Override
        public float[] bogieLengthFromCenter() {
            return new float[]{2, -2};
        }

        @Override
        public float getRenderScale() {
            return  0.0625f;
        }

        @Override
        public float[][] modelOffsets() {
            return new float[][]{{0f,-0.05F,0.F}};}

        /**
         * <h2>rider sit or stand</h2>
         * @return true if the rider(s) should be sitting, false if the rider should be standing.
         */
        @Override
        public boolean shouldRiderSit(){
            return true;
        }
        /**
         * <h2>reinforced transport</h2>
         * this returns if this specific entity is reinforced (explosion proof and damage resistant).
         * since this is a function it can b
         * te conditional as well, for instance if it has a specific skin.
         */

        /**
         * <h2>Fluid Tank Capacity</h2>
         */
        //@Override
        public int[] getTankCapacity(){return new int[]{9161, 800};}

        @Override
        public boolean isItemValidForSlot(int slot, ItemStack stack){
            switch (slot){
                case 400:{return stack!=null && stack.getItem() ==Items.redstone;}
                default:{return true;}
            }}

            /**
             * <h2>fuel management</h2>
             * defines how the transport manages burnHeat, both in consuming items, and in managing the burnHeat.
             */

            public void manageFuel() {
                this.fuelHandler.manageElectric(this);
            }

        /**
         * <h2>pre-assigned values</h2>
         * These return values are defined from the top of the class.
         * These should only need modification for advanced users, and even that's a stretch.
         */
        public Item getItem(){
            return thisItem;
        }

        public ModelBase[] getModel(){return new ModelBase[]{new QQQQ()};}

        /**
         * <h2>sets the resource location for sounds, like horn and the sound made for the engine running</h2>
         */
        @SideOnly(Side.CLIENT)
        @Override
        public ResourceLocation getHorn(){return URIRegistry.SOUND_HORN.getResource("xxxxxxx.ogg");}
        @SideOnly(Side.CLIENT)
        @Override
        public ResourceLocation getRunningSound(){return URIRegistry.SOUND_RUNNING.getResource("xxxxxxx.ogg");}
    }


